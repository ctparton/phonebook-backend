{"version":3,"sources":["components/Search.js","components/ContactForm.js","components/Contacts.js","services/phonebookService.js","components/Notificaton.js","App.js","serviceWorker.js","index.js"],"names":["Search","searchTerm","searchContacts","value","onChange","ContactForm","newContactHandler","name","newNameHandler","number","newNumberHandler","onSubmit","type","Contacts","contacts","handleDelete","filter","person","toLowerCase","includes","map","key","onClick","id","baseUrl","axios","get","then","response","data","contact","post","delete","updatedContact","put","Notification","message","style","success","color","fontWeight","padding","text","App","useState","persons","setPersons","setSearchTerm","newName","setNewName","newNumber","setNewNumber","notificationMessage","setNotificatonMessage","useEffect","phonebookService","catch","error","setTimeout","event","console","log","target","preventDefault","newPerson","existingPerson","indexOf","window","confirm","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kOAUeA,EARA,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,eACzB,OACE,iDACmB,2BAAOC,MAAOF,EAAYG,SAAUF,MCe9CG,EAlBK,SAAC,GAA0E,IAAzEC,EAAwE,EAAxEA,kBAAmBC,EAAqD,EAArDA,KAAMC,EAA+C,EAA/CA,eAAgBC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,iBACnE,OACE,6BACG,0BAAMC,SAAUL,GACnB,sCACY,2BAAOH,MAAOI,EAAMH,SAAUI,KAEtC,wCACU,2BAAOL,MAAOM,EAAQL,SAAUM,KAE1C,6BACE,4BAAQE,KAAK,UAAb,WCEGC,EAbE,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,SAAUb,EAA8B,EAA9BA,WAAYc,EAAkB,EAAlBA,aACrC,OACE,6BACE,4BACCD,EAASE,QAAO,SAAAC,GAAM,OAAIA,EAAOV,KAAKW,cAAcC,SAASlB,EAAWiB,kBAChEE,KAAI,SAAAH,GAAM,OAAI,wBAAII,IAAKJ,EAAOV,MAAM,2BAAIU,EAAOV,KAAX,IAAkBU,EAAOR,QAAW,4BAAQa,QAAS,kBAAMP,EAAaE,EAAOM,MAA3C,iB,gBCLnFC,EAAU,eAiBD,EAhBM,WACjB,OAAOC,IAAMC,IAAN,UAAaF,IACfG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAcpB,EAXI,SAACC,GAChB,OAAOL,IAAMM,KAAN,UAAcP,GAAWM,GAASH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAUxD,EAPM,SAACN,GAClB,OAAOE,IAAMO,OAAN,UAAgBR,EAAhB,YAA2BD,KAMvB,EAHM,SAACA,EAAIU,GACtB,OAAOR,IAAMS,IAAN,UAAaV,EAAb,YAAwBD,GAAMU,ICO1BE,EAtBM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,IAAKA,EACH,OAAO,KAaT,OACE,yBAAKC,MAAOD,EAAQE,QAPD,CACnBC,MAAO,QACPC,WAAY,OACZC,QAAS,QARQ,CACjBF,MAAO,MACPC,WAAY,OACZC,QAAS,SAUNL,EAAQM,OCiFFC,EA5FH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACRC,EADQ,KACCC,EADD,OAEoBF,mBAAS,IAF7B,mBAET3C,EAFS,KAEG8C,EAFH,OAGgBH,mBAAS,IAHzB,mBAGRI,EAHQ,KAGCC,EAHD,OAIkBL,mBAAS,IAJ3B,mBAITM,EAJS,KAIEC,EAJF,OAKqCP,mBAAS,MAL9C,mBAKTQ,EALS,KAKYC,EALZ,KAuEhBC,qBAVqB,WACnBC,IAEG5B,MAAK,SAAAC,GAAQ,OAAIkB,EAAWlB,MAC5B4B,OAAM,SAAAC,GACLJ,EAAsB,CAACX,KAAK,IAAD,OAAMe,EAAN,yCAAqDnB,SAAS,IACzFoB,YAAW,kBAAML,EAAsB,QAAO,UAI5B,IAOxB,OACE,6BACE,yCACA,kBAAC,EAAD,CAAcjB,QAASgB,IACvB,kBAAC,EAAD,CAAQnD,WAAcA,EAAYC,eA1BjB,SAACyD,GACpBC,QAAQC,IAAIF,EAAMG,OAAO3D,OACzB4C,EAAcY,EAAMG,OAAO3D,UAyBzB,+CACA,kBAAC,EAAD,CAAaG,kBAlEO,SAACqD,GACvBA,EAAMI,iBACN,IAAMC,EAAY,CAChBzD,KAAMyC,EACN3B,IAAK2B,EACLvC,OAAQyC,GAEJe,EAAiBpB,EAAQzB,KAAI,SAAAH,GAAM,OAAIA,EAAOV,QAAM2D,QAAQlB,GAC9DiB,GAAkB,EAChBE,OAAOC,QAAP,UAAkBpB,EAAlB,yEACFO,EAA8BV,EAAQoB,GAAgB1C,GAAtD,2BAA8DsB,EAAQoB,IAAtE,IAAuFxD,OAAQyC,KAC1FvB,MAAK,SAAAC,GACJgC,QAAQC,IAAIjC,GACZkB,EAAWD,EAAQzB,KAAI,SAAAH,GAAM,OAAIA,EAAOM,KAAOsB,EAAQoB,GAAgB1C,GAAKN,EAA3C,2BAAwD4B,EAAQoB,IAAhE,IAAiFxD,OAAQyC,QAC1HG,EAAsB,CAACX,KAAK,WAAD,OAAaM,GAAYV,SAAS,IAC7DoB,YAAW,kBAAML,EAAsB,QAAO,QAE/CG,OAAM,SAAAC,GACLG,QAAQC,IAAIJ,GACZJ,EAAsB,CAACX,KAAK,GAAD,OAAKe,EAAL,oBAAsBT,EAAtB,6CAA2EV,SAAS,IAC/GoB,YAAW,kBAAML,EAAsB,QAAO,QAItDE,EAA4BS,GACrBrC,MAAK,SAAAC,GACJgC,QAAQC,IAAIjC,GACZkB,EAAWD,EAAQwB,OAAR,2BAAmBL,GAAnB,IAA8BzC,GAAIK,EAASL,OACtD8B,EAAsB,CAACX,KAAK,SAAD,OAAWsB,EAAUzD,MAAS+B,SAAS,IAClEoB,YAAW,kBAAML,EAAsB,QAAO,QAE/CG,OAAM,SAAAC,GACLJ,EAAsB,CAACX,KAAK,GAAD,OAAKe,EAAL,0BAA4BO,EAAUzD,KAAtC,KAA+C+B,SAAS,IACnFoB,YAAW,kBAAML,EAAsB,QAAO,SAiCL9C,KAAMyC,EAASxC,eA5E7C,SAACmD,GACtBC,QAAQC,IAAIF,EAAMG,OAAO3D,OACzB8C,EAAWU,EAAMG,OAAO3D,QA2EVM,OAAQyC,EAAWxC,iBAxEN,SAACiD,GAC5BC,QAAQC,IAAIF,EAAMG,OAAO3D,OACzBgD,EAAaQ,EAAMG,OAAO3D,UAuExB,uCACA,kBAAC,EAAD,CAAUW,SAAU+B,EAAS5C,WAAcA,EAAYc,aAdtC,SAACe,GACpB8B,QAAQC,IAAR,gCAAqC/B,IACrCyB,EAA8BzB,GAASH,MAAK,SAAAC,GAAQ,OAAIgC,QAAQC,IAAIjC,MACpEkB,EAAWD,EAAQ7B,QAAO,SAAAC,GAAM,OAAIA,EAAOM,KAAOO,WCxElCwC,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLG,QAAQH,MAAMA,EAAMrB,c","file":"static/js/main.725f384a.chunk.js","sourcesContent":["import React from 'react'\n\nconst Search = ({searchTerm, searchContacts}) => {\n    return (\n      <div>\n        Filter contacts: <input value={searchTerm} onChange={searchContacts}/>\n      </div>\n    )\n  }\n\nexport default Search","import React from 'react'\n\nconst ContactForm = ({newContactHandler, name, newNameHandler, number, newNumberHandler}) =>  {\n    return(\n      <div>\n         <form onSubmit={newContactHandler}>\n      <div>\n            name: <input value={name} onChange={newNameHandler}/>\n          </div>\n          <div>\n            number: <input value={number} onChange={newNumberHandler}/>\n          </div>\n          <div>\n            <button type=\"submit\">add</button>\n          </div>\n    </form>\n      </div>\n    )\n  }\n\nexport default ContactForm","import React from 'react'\n\nconst Contacts = ({contacts, searchTerm, handleDelete}) => {\n    return(\n      <div>\n        <ul>\n        {contacts.filter(person => person.name.toLowerCase().includes(searchTerm.toLowerCase()))\n                .map(person => <li key={person.name}><p>{person.name} {person.number}</p><button onClick={() => handleDelete(person.id)}>delete</button></li>)}\n        </ul>\n        \n        \n      </div>\n    )\n  }\n\nexport default Contacts\n","import axios from 'axios'\n\nconst baseUrl = \"/api/persons\"\nconst fetchPersons = () => {\n    return axios.get(`${baseUrl}`)\n        .then(response => response.data)\n  }\n\nconst addContact = (contact) => {\n    return axios.post(`${baseUrl}`, contact).then(response => response.data)\n}\n\nconst deletePerson = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst updatePerson = (id, updatedContact) => {\n    return axios.put(`${baseUrl}/${id}`, updatedContact)\n}\nexport default { fetchPersons, addContact, deletePerson, updatePerson}","import React from 'react'\n\nconst Notification = ({message}) => {\n    if (!message) {\n      return null\n    }\n    const errorStyle = {\n      color: \"red\",\n      fontWeight: \"bold\",\n      padding: \"10px\"\n    }\n    const successStyle = {\n      color: \"green\",\n      fontWeight: \"bold\",\n      padding: \"10px\"\n    }\n  \n    return (\n      <div style={message.success ? successStyle : errorStyle}>\n        {message.text}\n      </div>\n    )\n  }\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Search from './components/Search'\nimport ContactForm from './components/ContactForm'\nimport Contacts from './components/Contacts'\nimport phonebookService from './services/phonebookService'\nimport Notification from './components/Notificaton'\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [searchTerm, setSearchTerm] = useState('')\n  const [ newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [notificationMessage, setNotificatonMessage] = useState(null)\n\n\n  const handleNewEntry = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNewNumberEntry = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handlePhonebook = (event) => {\n    event.preventDefault()\n    const newPerson = {\n      name: newName,\n      key: newName,\n      number: newNumber\n    }\n    const existingPerson = persons.map(person => person.name).indexOf(newName)\n    if (existingPerson > -1 ) {\n      if (window.confirm(`${newName} is already in the phonebook, replace the old number with a new one`)) {\n        phonebookService.updatePerson(persons[existingPerson].id, {...persons[existingPerson], number: newNumber})\n            .then(response => {\n              console.log(response)\n              setPersons(persons.map(person => person.id !== persons[existingPerson].id ? person : {...persons[existingPerson], number: newNumber}))\n              setNotificatonMessage({text: `Updated ${newName}`,  success: true})\n              setTimeout(() => setNotificatonMessage(null), 5000) \n            })\n            .catch(error => {\n              console.log(error)\n              setNotificatonMessage({text: `${error} Data on ${newName} has already been removed from the server`,  success: false})\n              setTimeout(() => setNotificatonMessage(null), 10000) \n            })\n      } \n    } else {\n      phonebookService.addContact(newPerson)\n            .then(response => {\n              console.log(response)\n              setPersons(persons.concat({...newPerson, id: response.id})) \n              setNotificatonMessage({text: `Added ${newPerson.name}`,  success: true})\n              setTimeout(() => setNotificatonMessage(null), 5000)\n            })\n            .catch(error => {\n              setNotificatonMessage({text: `${error} Could not add ${newPerson.name} `, success: false})\n              setTimeout(() => setNotificatonMessage(null), 5000)\n            })\n    }\n  }\n\n  const handleSearch = (event) => { \n    console.log(event.target.value)\n    setSearchTerm(event.target.value)\n  }\n\n  const fetchPersons = () => {\n    phonebookService\n      .fetchPersons()\n      .then(response => setPersons(response))\n      .catch(error => {\n        setNotificatonMessage({text: ` ${error} Could not fetch contacts from server`,  success: false})\n        setTimeout(() => setNotificatonMessage(null), 5000)\n      })\n  }\n    \n  useEffect(fetchPersons, []) \n\n  const handleDelete = (contact) =>  {\n    console.log(`User wishes to delete ${contact}`)\n    phonebookService.deletePerson(contact).then(response => console.log(response))\n    setPersons(persons.filter(person => person.id !== contact))\n  }\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage}></Notification> \n      <Search searchTerm = {searchTerm} searchContacts={handleSearch}/> \n      <h3>Add new contact</h3>\n      <ContactForm newContactHandler={handlePhonebook} name={newName} newNameHandler = {handleNewEntry}\n                  number={newNumber} newNumberHandler={handleNewNumberEntry} />\n      <h3>Numbers</h3>\n      <Contacts contacts={persons} searchTerm = {searchTerm} handleDelete={handleDelete}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}